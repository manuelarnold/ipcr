B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
### Derivatives
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
#m_deriv
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
###
jac <- matrix(0, nrow = (p+1)*p/2, ncol = q)
for (i in 1:length(theta)) {
symm <- F_RAM %*% B %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[, i] <- vech(symm + t(symm) + F_RAM %*% B %*% S_deriv[[i]] %*% t(B) %*% t(F_RAM))
}
jac
omxManifestModelByParameterJacobian(fit)
theta <- names(omxGetParameters(fit))
q <- length(theta)
p <- ncol(fit$data$observed)
p_unf <- nrow(fit$A$values)
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
### Helper objects
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
### Abbreviated matrices
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
### Derivatives
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
#m_deriv
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
###
jac <- matrix(0, nrow = (p+1)*p/2, ncol = q)
for (i in 1:length(theta)) {
symm <- F_RAM %*% B %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[, i] <- vech(symm + t(symm) + F_RAM %*% B %*% S_deriv[[i]] %*% t(B) %*% t(F_RAM))
}
jac
if (!require(devtools)) {install.packages("devtools")}
devtools::install_github("manuelarnold/ipcr")
load(ipcr)
m <- mxModel(model = "CFA",
manifestVars = c("x1", "x2", "x3"),
latentVars = "f",
type = "RAM",
mxData(observed = ipcr_data, type = "raw"),
mxPath(from = "f", to = c("x1", "x2", "x3"), arrows = 1,
free = c(FALSE, TRUE, TRUE), values = 1,
labels = c("l1", "l2", "l3")),
mxPath(from = "f", arrows = 2, free = TRUE, values = 0.75,
labels = "var_f"),
mxPath(from = c("x1", "x2", "x3"), arrows = 2, free = TRUE,
values = 0.25, labels = c("e1", "e2", "e3")),
mxPath(from = "one", to = c("x1", "x2", "x3"), arrows = 1,
free = TRUE, values = 0, labels = c("m1", "m2", "m3")))
# Fit the model
fit <- mxTryHard(model = m)
omxManifestModelByParameterJacobian(fit)
theta <- names(omxGetParameters(fit))
theta
fit$M$labels
theta %in% fit$M$labels
which(theta %in% fit$M$labels)
theta_cov <- names(omxGetParameters(fit))
means
which(theta_cov %in% fit$M$labels)
means <- which(theta_cov %in% fit$M$labels)
theta_cov <- names(omxGetParameters(fit))
meanstructure = T
theta_cov <- names(omxGetParameters(fit))
if (meanstructure) {
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
}
means
theta_means
theta_cov
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q), function(x) {zero})
m_deriv
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
for (i in 1:q_means) {
m_deriv[[i]][which(fit$m$labels == theta_means[i], arr.ind = TRUE)] <- 1
}
theta_cov <- names(omxGetParameters(fit))
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
q_means <- length(theta_means)
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
for (i in 1:q_means) {
m_deriv[[i]][which(fit$m$labels == theta_means[i], arr.ind = TRUE)] <- 1
}
m_deriv
theta_means
i
fit$m$labels
theta_cov <- names(omxGetParameters(fit))
if (meanstructure) {
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
q_means <- length(theta_means)
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i], arr.ind = TRUE)] <- 1
}
}
theta_cov <- names(omxGetParameters(fit))
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
q_means <- length(theta_means)
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
m_deriv
i = 1
which(fit$M$labels == theta_means[i], arr.ind = TRUE)
m_deriv[[i]][which(fit$M$labels == theta_means[i], arr.ind = TRUE)] <- 1
i = 2
which(fit$M$labels == theta_means[i], arr.ind = TRUE)
theta_means
theta_cov <- names(omxGetParameters(fit))
if (meanstructure) {
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
q_means <- length(theta_means)
zero <- matrix(0, nrow = p, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
}
m_deriv
q_cov <- length(theta_cov)
which(theta %in% fit$M$labels)
q <- length(theta)
p <- ncol(fit$data$observed)
p_unf <- nrow(fit$A$values)
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
FB
FB
FB
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
FB
t(FB)
t(B) %*% t(F)
t(B) %*% t(F_RAM)
q_tot <- q_cov + q_means
i = 1
m
FB %*% A_deriv[[i]] %*% B %*% m + FB m_deriv[[i]]
FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
m_deriv[[i]]
FB
FB %*% m_deriv[[i]]
FB %*% t(m_deriv[[i]])
FB %*% m_deriv[[i]]
fit$M$values
q_means
theta_cov <- names(omxGetParameters(fit))
if (meanstructure) {
means <- which(theta_cov %in% fit$M$labels)
theta_means <- theta_cov[means]
theta_cov <- theta_cov[-means]
q_means <- length(theta_means)
q_tot <- q_cov + q_means
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_means), function(x) {zero})
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
}
p <- ncol(fit$data$observed)
q_cov <- length(theta_cov)
p_unf <- nrow(fit$A$values)
p_star <- (p+1)*p/2
p_star_means <- p * (p + 3) / 2
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = (p+1)*p/2, ncol = q_cov)
for (i in 1:length(theta)) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
p_unf
i
for (i in 1:length(theta_cov)) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
jac_covmeans <- matrix(0, nrow = p_star_means, ncol = q_means + q_cov)
jac_covmeans[1:p_star, 1:q_cov] <- jac
i = 1
jac[, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
omxManifestModelByParameterJacobian(fit)
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:length(theta)) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
i
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
i = 1
FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
omxManifestModelByParameterJacobian(fit)
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:q)) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[1:p_star, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:q) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[1:p_star, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
i = 1
FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
for (i in 1:q) {
jac[(p_star+1):p_star_means, i] <- FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
}
}
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q_means) {
m_deriv[[i]][which(fit$M$labels == theta_means[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:q) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[1:p_star, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
for (i in 1:q) {
jac[(p_star+1):p_star_means, i] <- FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
}
jac
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:) {
m_deriv[[i]][which(fit$M$labels == theta[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:q) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[1:p_star, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
for (i in 1:q) {
jac[(p_star+1):p_star_means, i] <- FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
}
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:length(theta)) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:length(theta)) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:) {
m_deriv[[i]][which(fit$M$labels == theta[i])] <- 1
}
for (i in 1:q) {
m_deriv[[i]][which(fit$M$labels == theta[i])] <- 1
}
p <- ncol(fit$data$observed)
p_star_means <- p * (p + 3) / 2
theta <- names(omxGetParameters(fit))
q <- length(theta)
### Derivatives
Zero <- matrix(0, nrow = p_unf, ncol = p_unf)
A_deriv <- lapply(seq_len(q), function(x) {Zero})
S_deriv <- A_deriv
zero <- matrix(0, nrow = p_unf, ncol = 1)
m_deriv <- lapply(seq_len(q_tot), function(x) {zero})
for (i in 1:q) {
A_deriv[[i]][which(fit$A$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q) {
S_deriv[[i]][which(fit$S$labels == theta[i], arr.ind = TRUE)] <- 1
}
for (i in 1:q) {
m_deriv[[i]][which(fit$M$labels == theta[i])] <- 1
}
### RAM Matrices
A <- fit$A$values
S <- fit$S$values
F_RAM <- fit$F$values
m <- t(fit$M$values)
B <- solve(diag(x = 1, nrow = nrow(A)) - A)
E <- B %*% S %*% t(B)
FB <- F_RAM %*% B
###
jac <- matrix(0, nrow = p_star_means, ncol = q)
for (i in 1:q) {
symm <- FB %*% A_deriv[[i]] %*% E %*% t(F_RAM)
jac[1:p_star, i] <- vech(symm + t(symm) + FB %*% S_deriv[[i]] %*% t(FB))
}
for (i in 1:q) {
jac[(p_star+1):p_star_means, i] <- FB %*% A_deriv[[i]] %*% B %*% m + FB %*% m_deriv[[i]]
}
jac
omxManifestModelByParameterJacobian(fit)
round(jac, 7) == round(omxManifestModelByParameterJacobian(fit), 7)
